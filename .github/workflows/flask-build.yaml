name: CI for Flask App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  increment-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump_version.outputs.version}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Read Current Version
        id: read_version
        run: |
          if [ ! -f version.txt ]; then
            echo "0.0.0" > version.txt  # Default if version file doesn't exist
          fi
          VERSION=$(cat version.txt)
          echo "Current version is $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Increment Version
        id: bump_version
        run: |
          IFS='.' read -r -a parts <<< "${{ env.version }}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          patch=$((patch + 1))  # Increment patch number
          NEW_VERSION="$major.$minor.$patch"
          echo "New version is $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "$NEW_VERSION" > version.txt
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and Push Version
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "actions@github.com"
          git add version.txt
          git commit -m "Increment version to ${{ env.new_version }}"
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}

  build-and-test:
    runs-on: ubuntu-latest
    needs: increment-version
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' # Adjust version to match your project

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Run tests
    #- name: Run tests
    #  run: |
    #    pytest tests/

    # Step 5: Start the Flask app
    - name: Check if Flask app runs
      run: |
        python application.py &
        sleep 10
        curl -I http://127.0.0.1:5000

    # Step 6: Stop the Flask app
    - name: Kill Flask app
      run: |
        pkill -f application.py

  Deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Generate deployment package
      run: zip -r deploy.zip . -x '*.git*'

    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: Flask-test
        environment_name: Flask-test-env
        version_label: ${{ needs.increment-version.outputs.version }}
        region: us-east-1
        deployment_package: deploy.zip
